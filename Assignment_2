Q1. #include <stdio.h>
#define MAX_STUDENTS 100
int main() {
    int marks[MAX_STUDENTS];
    int num_students, i;
    printf("Enter the number of students: ");
    scanf("%d", &num_students);
    printf("Enter the marks of the students:\n");
    for (i = 0; i < num_students; i++) {
        printf("Student %d: ", i + 1);
        scanf("%d", &marks[i]);
    }
    for (i = 0; i < num_students; i++) {
        marks[i] += 5;
    }
    printf("\nUpdated marks after increasing by 5:\n");
    for (i = 0; i < num_students; i++) {
        printf("Student %d: %d\n", i + 1, marks[i]);
    }
 return 0;
}

Q2. #include <stdio.h>

#define MAX_STUDENTS 100

void printGrade(int marks[], int num_students) {
    for (int i = 0; i < num_students; i++) {
        if (marks[i] >= 75) {
            printf("Student %d: Grade A\n", i + 1);
        } else if (marks[i] >= 60) {
            printf("Student %d: Grade B\n", i + 1);
        } else if (marks[i] >= 40) {
            printf("Student %d: Grade C\n", i + 1);
        } else {
            printf("Student %d: Grade D\n", i + 1);
        }
    }
}

int main() {
    int marks[MAX_STUDENTS];
    int num_students;

    // Input the number of students
    printf("Enter the number of students: ");
    scanf("%d", &num_students);

    // Input the marks of each student
    printf("Enter the marks of the students:\n");
    for (int i = 0; i < num_students; i++) {
        printf("Student %d: ", i + 1);
        scanf("%d", &marks[i]);
    }

    // Print the grades
    printf("\nGrades of Students:\n");
    printGrade(marks, num_students);

    return 0;
}

Q3. #include <stdio.h>

#define MAX_STUDENTS 100

int main() {
    int marks[MAX_STUDENTS];
    int num_students;
    int found_index = -1; 
    printf("Enter the number of students: ");
    scanf("%d", &num_students);
    printf("Enter the marks of the students:\n");
    for (int i = 0; i < num_students; i++) {
        printf("Student %d: ", i + 1);
        scanf("%d", &marks[i]);
    }
    for (int i = 0; i < num_students; i++) {
        if (marks[i] == 99) {
            found_index = i; 
            break; 
        }
    }
    if (found_index != -1) {
        printf("The first student to score 99 is Student %d (Index: %d).\n", found_index + 1, found_index);
    } else {
        printf("No student scored 99.\n");
    }

    return 0;
}

Q4. #include <stdio.h>

#define MAX_STUDENTS 100

int main() {
    int marks[MAX_STUDENTS];
    int num_students;
    int count = 0; 
    printf("Enter the number of students: ");
    scanf("%d", &num_students);
    printf("Enter the marks of the students:\n");
    for (int i = 0; i < num_students; i++) {
        printf("Student %d: ", i + 1);
        scanf("%d", &marks[i]);
    }
    printf("\nStudents who scored 99:\n");
    for (int i = 0; i < num_students; i++) {
        if (marks[i] == 99) {
            printf("Student %d (Index: %d)\n", i + 1, i);
            count++; 
        }
    }
    if (count > 0) {
        printf("\nTotal number of students who scored 99: %d\n", count);
    } else {
        printf("\nNo student scored 99.\n");
    }
 return 0;
}

Q5. #include <stdio.h>

#define MAX_STUDENTS 100

int main() {
    int marks[MAX_STUDENTS];
    int num_students;
    int sum = 0; 
    printf("Enter the number of students: ");
    scanf("%d", &num_students);
    printf("Enter the marks of the students:\n");
    for (int i = 0; i < num_students; i++) {
        printf("Student %d: ", i + 1);
        scanf("%d", &marks[i]);
    }
    for (int i = 0; i < num_students; i++) {
        sum += marks[i];
    }
    printf("\nSum of all scores in Marks array: %d\n", sum);

    return 0;
}

Q6. #include <stdio.h>

#define MAX_STUDENTS 100

int main() {
    int marks[MAX_STUDENTS];
    int num_students;
    int sum = 0; 
    float average; 
    printf("Enter the number of students: ");
    scanf("%d", &num_students);
    printf("Enter the marks of the students:\n");
    for (int i = 0; i < num_students; i++) {
        printf("Student %d: ", i + 1);
        scanf("%d", &marks[i]);
    }
    for (int i = 0; i < num_students; i++) {
        sum += marks[i];
    }
    if (num_students > 0) {
        average = (float)sum / num_students; 
        printf("\nAverage score of the Marks array: %.2f\n", average);
    } else {
        printf("\nNo students to calculate average.\n");
    }

    return 0;
}

Q7. #include <stdio.h>

#define MAX_STUDENTS 100

int main() {
    int scores[MAX_STUDENTS];
    int num_students;
    printf("Enter the number of students: ");
    scanf("%d", &num_students);
    printf("Enter the scores of the students:\n");
    for (int i = 0; i < num_students; i++) {
        printf("Student %d: ", i + 1);
        scanf("%d", &scores[i]);
    }
    printf("\nScores and their even/odd status:\n");
    for (int i = 0; i < num_students; i++) {
        if (scores[i] % 2 == 0) {
            printf("Score of Student %d (Score: %d) is Even.\n", i + 1, scores[i]);
        } else {
            printf("Score of Student %d (Score: %d) is Odd.\n", i + 1, scores[i]);
        }
    }

    return 0;
}

Q8. #include <stdio.h>

#define MAX_STUDENTS 100

int main() {
    int marks[MAX_STUDENTS];
    int num_students;
    printf("Enter the number of students: ");
    scanf("%d", &num_students);
    printf("Enter the marks of the students:\n");
    for (int i = 0; i < num_students; i++) {
        printf("Student %d: ", i + 1);
        scanf("%d", &marks[i]);
    }
    int max_score = marks[0];
    int min_score = marks[0];
    for (int i = 1; i < num_students; i++) {
        if (marks[i] > max_score) {
            max_score = marks[i];
        }
        if (marks[i] < min_score) {
            min_score = marks[i];
        }
    }
    printf("\nMaximum score: %d\n", max_score);
    printf("Minimum score: %d\n", min_score);
   return 0;
}

Q9. #include <stdio.h>

#define MAX_SIZE 100
int findPeak(int arr[], int n) {
    if (n == 1 || arr[0] >= arr[1]) {
        return 0; 
    }
    if (arr[n - 1] >= arr[n - 2]) {
        return n - 1; 
    }
    for (int i = 1; i < n - 1; i++) {
        if (arr[i] >= arr[i - 1] && arr[i] >= arr[i + 1]) {
            return i; 
        }
    }
    return -1; 
}

int main() {
    int arr[MAX_SIZE];
    int n;
    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < n; i++) {
        printf("Element %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
    int peakIndex = findPeak(arr, n);

    if (peakIndex != -1) {
        printf("A peak element is: %d (at index %d)\n", arr[peakIndex], peakIndex);
    } else {
        printf("No peak element found.\n");
    }

    return 0;
}

Q10. #include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 100
bool isPrime(int num) {
    if (num <= 1) {
        return false;
    }
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return false; 
        }
    }
    return true; 
}

int main() {
    int arr[MAX_SIZE];
    int n, primeCount = 0;
    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < n; i++) {
        printf("Element %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
    for (int i = 0; i < n; i++) {
        if (isPrime(arr[i])) {
            primeCount++;
        }
    }
    printf("Number of prime numbers in the array: %d\n", primeCount);
return 0;
}

Q11. #include <stdio.h>

#define MAX_SIZE 100

void printArray(int arr[], int n) {
    printf("Array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

void insertAtFront(int arr[], int *n, int value) {
    for (int i = *n; i > 0; i--) {
        arr[i] = arr[i - 1];
    }
    arr[0] = value; 
    (*n)++; 
}
void insertAtEnd(int arr[], int *n, int value) {
    arr[*n] = value;
    (*n)++;
}

void insertAtPosition(int arr[], int *n, int value, int position) {
    if (position < 0 || position > *n) {
        printf("Invalid position!\n");
        return;
    }
    for (int i = *n; i > position; i--) {
        arr[i] = arr[i - 1];
    }
    arr[position] = value; 
    (*n)++; 
}

int main() {
    int arr[MAX_SIZE];
    int n = 0; 
    int choice, value, position;
    printf("Enter the number of initial elements in the array: ");
    scanf("%d", &n);
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < n; i++) {
        printf("Element %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
    printArray(arr, n);
    do {
        printf("\nChoose an insertion option:\n");
        printf("1. Insert at Front\n");
        printf("2. Insert at End\n");
        printf("3. Insert at Any Position\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert at front: ");
                scanf("%d", &value);
                insertAtFront(arr, &n, value);
                break;
            case 2:
                printf("Enter value to insert at end: ");
                scanf("%d", &value);
                insertAtEnd(arr, &n, value);
                break;
            case 3:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                printf("Enter position (0 to %d): ", n);
                scanf("%d", &position);
                insertAtPosition(arr, &n, value, position);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
        printArray(arr, n);

    } while (choice != 4);

    return 0;
}

Q12. #include <stdio.h>

#define MAX_SIZE 100

void printArray(int arr[], int n) {
    printf("Array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

void deleteAtFront(int arr[], int *n) {
    if (*n == 0) {
        printf("Array is empty! Cannot delete from front.\n");
        return;
    }
    for (int i = 0; i < *n - 1; i++) {
        arr[i] = arr[i + 1];
    }
    (*n)--;
}

void deleteAtEnd(int arr[], int *n) {
    if (*n == 0) {
        printf("Array is empty! Cannot delete from end.\n");
        return;
    }
    (*n)--;
}

void deleteAtPosition(int arr[], int *n, int position) {
    if (position < 0 || position >= *n) {
        printf("Invalid position! Cannot delete from position %d.\n", position);
        return;
    }
    for (int i = position; i < *n - 1; i++) {
        arr[i] = arr[i + 1];
    }
    (*n)--; 
}

int main() {
    int arr[MAX_SIZE];
    int n = 0; 
    int choice, position;
    printf("Enter the number of initial elements in the array: ");
    scanf("%d", &n);
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < n; i++) {
        printf("Element %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
    printArray(arr, n);
    do {
        printf("\nChoose a deletion option:\n");
        printf("1. Delete at Front\n");
        printf("2. Delete at End\n");
        printf("3. Delete at Any Position\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                deleteAtFront(arr, &n);
                break;
            case 2:
                deleteAtEnd(arr, &n);
                break;
            case 3:
                printf("Enter position (0 to %d): ", n - 1);
                scanf("%d", &position);
                deleteAtPosition(arr, &n, position);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
        printArray(arr, n);

    } while (choice != 4);

    return 0;
}

Q13. #include <stdio.h>

void rotateArray(int arr[], int n) {
    if (n <= 1) {
        return; 
    }

    int lastElement = arr[n - 1]; 
    for (int i = n - 1; i > 0; i--) {
        arr[i] = arr[i - 1];
    }

    arr[0] = lastElement; 
}

void printArray(int arr[], int n) {
    printf("Array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original ");
    printArray(arr, n);

    rotateArray(arr, n);

    printf("Rotated ");
    printArray(arr, n);

    return 0;
}

Q14. #include <stdio.h>

#define MAX_SIZE 100

void printDuplicates(int arr[], int n) {
    int foundDuplicate = 0; 
    int count[MAX_SIZE] = {0}; 
    for (int i = 0; i < n; i++) {
        count[arr[i]]++; 
    }
    printf("Duplicates: ");
    for (int i = 0; i < MAX_SIZE; i++) {
        if (count[i] > 1) {
            printf("%d ", i); 
            foundDuplicate = 1; 
        }
    }

    if (!foundDuplicate) {
        printf("-1"); 
    }
    printf("\n");
}

int main() {
    int arr[] = {2, 10, 10, 100, 2, 10, 11, 2, 11, 2};
    int n = sizeof(arr) / sizeof(arr[0]);

    printDuplicates(arr, n);

    return 0;
}

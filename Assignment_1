Q1.  #include <stdio.h>
#include <math.h>
int main() {
    int num, originalNum, remainder, n = 0;
    float result = 0.0;
    printf("Enter an integer: ");
    scanf("%d", &num);
    originalNum = num;
    while (originalNum != 0) {
        originalNum /= 10;
        ++n;
    }
originalNum = num;
    while (originalNum != 0) {
        remainder = originalNum % 10;
        result += pow(remainder, n);
        originalNum /= 10;
    }
    if ((int)result == num) {
        printf("%d is an Armstrong number.\n", num);
    } else {
        printf("%d is not an Armstrong number.\n", num);
    }
  return 0;
}


Q2. #include <stdio.h>

int main() {
    int num1, num2, hcf;
    printf("Enter two integers: ");
    scanf("%d %d", &num1, &num2);
    if (num1 < num2) {
        int temp = num1;
        num1 = num2;
        num2 = temp;
    }
    while (num2 != 0) {
        hcf = num2;
        num2 = num1 % num2;
        num1 = hcf;
    }
    printf("HCF is: %d\n", hcf);

    return 0;
}



Q3. #include <stdio.h>

int subtract(int a, int b) {
    while (b != 0) {
        int borrow = (~a) & b;
        a = a ^ b;
        b = borrow << 1;
    }
    return a;
}

int main() {
    int num1, num2, result;
    printf("Enter two integers: ");
    scanf("%d %d", &num1, &num2);
    result = subtract(num1, num2);
    printf("Result of subtraction: %d\n", result);

    return 0;
}

Q4. #include <stdio.h>

// Function prototypes for different swap methods
void swapUsingTemp(int *a, int *b);
void swapUsingArithmetic(int *a, int *b);
void swapUsingXOR(int *a, int *b);
void swapUsingPointers(int **a, int **b);

int main() {
    int num1, num2;
    printf("Enter two integers: ");
    scanf("%d %d", &num1, &num2);
    printf("Original values: num1 = %d, num2 = %d\n", num1, num2);
    swapUsingTemp(&num1, &num2);
    printf("After swapping using temp: num1 = %d, num2 = %d\n", num1, num2);
    swapUsingTemp(&num1, &num2);
    swapUsingArithmetic(&num1, &num2);
    printf("After swapping using arithmetic: num1 = %d, num2 = %d\n", num1, num2);
    swapUsingTemp(&num1, &num2);
    swapUsingXOR(&num1, &num2);
    printf("After swapping using XOR: num1 = %d, num2 = %d\n", num1, num2);
    swapUsingTemp(&num1, &num2);
    swapUsingPointers(&num1, &num2);
    printf("After swapping using pointers: num1 = %d, num2 = %d\n", num1, num2);

    return 0;
}
void swapUsingTemp(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}
void swapUsingArithmetic(int *a, int *b) {
    *a = *a + *b;
    *b = *a - *b; 
    *a = *a - *b; 
}
void swapUsingXOR(int *a, int *b) {
    *a = *a ^ *b;
    *b = *a ^ *b; 
    *a = *a ^ *b;
}
void swapUsingPointers(int **a, int **b) {
    int *temp = *a;
    *a = *b;
    *b = temp;
}

Q5. #include <stdio.h>

int isPerfectNumber(int num) {
    int sum = 0;
    for (int i = 1; i <= num / 2; i++) {
        if (num % i == 0) {
            sum += i;
        }
    }
    return sum == num;
}

int main() {
    int number;
    printf("Enter a positive integer: ");
    scanf("%d", &number);
    if (number <= 0) {
        printf("Please enter a positive integer.\n");
    } else if (isPerfectNumber(number)) {
        printf("%d is a perfect number.\n", number);
    } else {
        printf("%d is not a perfect number.\n", number);
    }

    return 0;
}

Q6. #include <stdio.h>

int main() {
    float x, y;
    printf("Enter the coordinate point (x y): ");
    scanf("%f %f", &x, &y);
    if (x > 0 && y > 0) {
        printf("The coordinate point (%f, %f) lies in the First quadrant.\n", x, y);
    } else if (x < 0 && y > 0) {
        printf("The coordinate point (%f, %f) lies in the Second quadrant.\n", x, y);
    } else if (x < 0 && y < 0) {
        printf("The coordinate point (%f, %f) lies in the Third quadrant.\n", x, y);
    } else if (x > 0 && y < 0) {
        printf("The coordinate point (%f, %f) lies in the Fourth quadrant.\n", x, y);
    } else if (x == 0 && y == 0) {
        printf("The coordinate point (%f, %f) is at the Origin.\n", x, y);
    } else if (x == 0) {
        printf("The coordinate point (%f, %f) lies on the Y-axis.\n", x, y);
    } else if (y == 0) {
        printf("The coordinate point (%f, %f) lies on the X-axis.\n", x, y);
    }

    return 0;
}

Q7. #include <stdio.h>
#include <math.h>

void binaryToDecimal() {
    long long binary;
    int decimal = 0, remainder, i = 0;

    printf("Enter a binary number: ");
    scanf("%lld", &binary);

    while (binary != 0) {
        remainder = binary % 10;
        decimal += remainder * pow(2, i);
        binary /= 10;
        i++;
    }

    printf("The decimal equivalent is: %d\n", decimal);
}

void decimalToBinary() {
    int decimal, remainder;
    char binary[32];
    int i = 0;

    printf("Enter a decimal number: ");
    scanf("%d", &decimal);

    if (decimal == 0) {
        printf("The binary equivalent is: 0\n");
        return;
    }

    while (decimal != 0) {
        remainder = decimal % 2;
        binary[i] = remainder + '0';
        decimal /= 2;
        i++;
    }

    printf("The binary equivalent is: ");
    for (int j = i - 1; j >= 0; j--) {
        printf("%c", binary[j]);
    }
    printf("\n");
}

int main() {
    int choice;

    printf("Choose the conversion type:\n");
    printf("1. Binary to Decimal\n");
    printf("2. Decimal to Binary\n");
    printf("Enter your choice (1 or 2): ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            binaryToDecimal();
            break;
        case 2:
            decimalToBinary();
            break;
        default:
            printf("Invalid choice. Please select 1 or 2.\n");
            break;
    }

    return 0;
}

Q8. #include <stdio.h>

int main() {
    int rows = 5; 

    for (int i = 1; i <= rows; i++) { 
        for (int j = 1; j <= i; j++) { 
            if ((i + j) % 2 == 0) {
                printf("1");
            } else {
                printf("0");
            }
        }
        printf("\n"); 
    }

    return 0;
}

Q9. #include <stdio.h>

int main() {
    int rows = 5; 
    for (int i = 1; i <= rows; i++) { 
        for (int j = 0; j < i; j++) { 
            if (j % 2 == 0) {
                printf("0");
            } else {
                printf("1");
            }
        }
        printf(" ");
        for (int j = 0; j < i; j++) {
            if (j % 2 == 0) {
                printf("0");
            } else {
                printf("1");
            }
        }
        printf("\n");
    }
    for (int j = 0; j < 2 * rows; j++) {
        if (j % 2 == 0) {
            printf("0");
        } else {
            printf("1");
        }
    }
    printf("\n");

    return 0;
}

Q10. #include <stdio.h>

void main() {
    int n, i, line;
    printf("Enter how many lines of Pascal's triangle you want to print: ");
    scanf("%d", &n);

    for (line = 0; line < n; line++) {
        for (i = 0; i < n - line - 1; i++) {
            printf("  ");
        }
        int coef = 1; 
        for (i = 0; i <= line; i++) {
            printf("%4d", coef);
            coef = coef * (line - i) / (i + 1); 
        }
        printf("\n"); 
    }
}
